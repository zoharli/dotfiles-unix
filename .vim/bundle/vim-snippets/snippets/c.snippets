#personal
snippet PI 
	const double pi=3.14159265358979323846264338327950288L;

snippet scan
	scanf("%${1:d}",&${2:n});

snippet prin
	printf("%${1:d}\n",${2:ret});

snippet for
	for (int $2 = ${3:0}; ${2:i} < ${1:n}; ++$2){
	}

snippet forl
	for (int $2 = ${3:0}; ${2:i} < ${1:n}; ++$2)

snippet for=
	for (int $2 = ${3:0}; ${2:i} <= ${1:n}; ++$2){
	}

snippet for-
	for (int ${2:i} = ${1:n-1}; $2>=${3:0};--$2){
	}

snippet for--
	for (int ${2:i} = ${1:n-1}; $2>${3:0};--$2){
	}

snippet for0
	for (int $2 = ${3:0}; ${2:i} <= ${1:n}; ++$2) {
	}

snippet for1
	for (int $2 = ${3:1}; ${2:i} <= ${1:n}; ++$2) {
	}

snippet for1-
	for (int $2 = ${3:1}; ${2:i} < ${1:n}; ++$2) {
	}

snippet for2
	for (int $2 = 2; ${2:i} <= ${1:n}; ++$2) {
	}

snippet for2-
	for (int $2 = 2; ${2:i} < ${1:n}; ++$2) {
	}

snippet wh
	while(${1}){
		${2}
	}

snippet mem
	memset(${1:a},${2:0},sizeof($1));

#data structure、algorithms
snippet qpow
	ll qpow(ll a,ll p){
		ll ret=1;
		while(p){
			if(p&1)ret=(ret*a)%mod;
			a=(a*a)%mod;
			p>>=1;
		}
		return ret;
	}

snippet Point
	struct Point {
		double x, y;
		Point() {}
		Point(double x, double y): x(x), y(y) {}
		inline void read() {
			scanf("%lf%lf", &x, &y);
		}
		inline Point operator+(const Point& p) const {
			return Point(x + p.x, y + p.y);
		}
		inline Point operator-(const Point& p) const {
			return Point(x - p.x, y - p.y);
		}
		inline bool operator<(const Point& p) const {
			if(x<p.x+eps && x>p.x-eps)return y-eps<p.y;
			else return x<p.x;
		}
		inline Point operator*(const double& k) const {
			return Point(k * x, k * y);
		}
		inline double operator*(const Point& p) const {
			return x * p.x + y * p.y;
		}
		inline double operator^(const Point& p) const {
			return x * p.y - y * p.x;
		}
		inline Point rotate(double rad) {
			return Point(x * cos(rad) - y * sin(rad), x * sin(rad) + y * cos(rad));
		}
		inline double length() {
			return sqrt(x * x + y * y);
		}
		inline double angle() {
			return atan2(y, x);
		}
		inline void norm() {
			double l = length();
			x /= l, y /= l;
		}
		void see() {
			printf("%.4f %.4f\n", x, y);
		}
	};

snippet Matrix
	struct Matrix :vector<vector<ll> >
	{
		int height,width;
		Matrix(){}
		Matrix(int height,int width): height(height),width(width){
			assign(height, vector<ll>(width,0));
		}

		Matrix operator*(const Matrix &m){
			Matrix ret(this->height,m.width);
			for (int i = 0; i < this->height; ++i){
				for (int k = 0; k < this->width; ++k){
					for (int j = 0; j < m.width; ++j){
						ret[i][j] += (*this)[i][k]*m[k][j];
						ret[i][j] %= mod;
						if(ret[i][j]<0)ret[i][j]+=mod;
					}
				}
			}
			return ret;
		}
		
		Matrix pow(const ll k){
			Matrix ret=get_identity((*this).width), base=(*this);
			for (ll e=k;e;e>>=1){
				if(e&1){
					ret=ret*base;
				}
				base=base*base;
			}
			return ret;
		}
		static Matrix get_identity(int size){
			Matrix ret(size,size);
			for (int i = 0; i < size; ++i){
				ret[i][i]=1;
			}
			return ret;
		}
	};



## Main
# main
snippet mainc
	int main(int argc, const char *argv[])
	{
		${0}
		return 0;
	}
# main(void)
snippet mainn
	int main(void)
	{
		${0}
		return 0;
	}
##
## Preprocessor
# #include <...>
snippet inc
	#include <${1}>
# #include "..."
snippet Inc
	#include "${1:`vim_snippets#Filename("$1.h")`}"
# ifndef...define...endif
snippet ndef
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif /* ifndef $1 */
# define
snippet def
	#define
# ifdef...endif
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
# if
snippet #if
	#if ${1:FOO}
		${0:${VISUAL}}
	#endif
# header include guard
snippet once
	#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}

	#define $1

	${0}

	#endif /* end of include guard: $1 */
##
## Control Statements
# if
snippet if
	if (${1:true}) {
		${0:${VISUAL}}
	}
snippet ife
	if (${1:true}) {
		${2:${VISUAL}}
	} else {
		${0}
	}
# else
snippet el
	else {
		${0:${VISUAL}}
	}
# else if
snippet elif
	else if (${1:true}) {
		${0:${VISUAL}}
	}
# ifi
snippet ifi
	if (${1:true}) ${0};
# ternary
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
		default:
			${6}
	}
# switch without default
snippet switchndef
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
	}
# case
snippet case
	case ${1:/* variable case */}:
		${2}
		${3:break;}
snippet ret
	return ${0};
##
## Loops
# for
# for (custom)
snippet forr
	for (int ${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5}
	}
# do... while
snippet do
	do {
		${0:${VISUAL}}
	} while (${1:/* condition */});
##
## Functions
# function definition
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4}
	}
# function definition with zero parameters
snippet fun0
	${1:void} ${2:function_name}()
	{
		${3}
	}
# function definition with Doxygen documentation
snippet dfun0
	/*! \brief ${1:Brief function description here}
	 *
	 *  ${2:Detailed description of the function}
	 *
	 * \return ${3:Return parameter description}
	 */
	${4:void} ${5:function_name}()
	{
		${6}
	}
# function definition with one parameter
snippet fun1
	${1:void} ${2:function_name}(${3:Type} ${4:Parameter})
	{
		${5}
	}
# function definition with one parameter with  Doxygen documentation
snippet dfun1
	/*! \brief ${1:Brief function description here}
	 *
	 *  ${2:Detailed description of the function}
	 *
	 * \param $3 ${4:Parameter description}
	 * \return ${5:Return parameter description}
	 */
	${6:void} ${7:function_name}(${8:Type} ${3:Parameter})
	{
		${9}
	}
# function definition with two parameters
snippet fun2
	${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter})
	{
		${7}
	}
# function definition with two parameters with  Doxygen documentation
snippet dfun2
	/*! \brief ${1:Brief function description here}
	 *
	 *  ${2:Detailed description of the function}
	 *
	 * \param $3 ${4:Parameter description}
	 * \param $5 ${6:Parameter description}
	 * \return ${7:Return parameter description}
	 */
	${8:void} ${9:function_name}(${10:Type} ${3:Parameter}, ${11:Type} ${5:Parameter})
	{
		${12}
	}
# function definition with two parameters
snippet fun3
	${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter}, ${7:Type} ${8:Parameter})
	{
		${9}
	}
# function definition with two parameters with  Doxygen documentation
snippet dfun3
	/*! \brief ${1:Brief function description here}
	 *
	 *  ${2:Detailed description of the function}
	 *
	 * \param $3 ${4:Parameter description}
	 * \param $5 ${6:Parameter description}
	 * \param $7 ${8:Parameter description}
	 * \return ${9:Return parameter description}
	 */
	${10:void} ${11:function_name}(${12:Type} ${3:Parameter}, ${13:Type} ${5:Parameter}, ${14:Type} ${7:Parameter})
	{
		${15}
	}
# function declaration
snippet fund
	${1:void} ${2:function_name}(${3});
##
## Types
# typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};
# struct
snippet st
	/*! \struct $1
	 *  \brief ${3:Brief struct description}
	 *
	 *  ${4:Detailed description}
	 */
	struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {
		${2:Data} /*!< ${4:Description} */
	}${5: /* optional variable list */};
# typedef struct
snippet tds
	/*! \struct $2
	 *  \brief ${5:Brief struct description}
	 *
	 *  ${6:Detailed description}
	 */
	typedef struct ${2:_$1 }{
		m_${3:Data} /*!< ${4:Description} */
	} ${1:`vim_snippets#Filename('$1_t', 'name')`};

snippet enum
	/*! \enum $1
	 *
	 *  ${2:Detailed description}
	 */
	enum ${1:name} { ${0} };
# typedef enum
snippet tde
	/*! \enum $2
	 *
	 *  ${4:Detailed description}
	 */
	typedef enum {
		${1:Data} /*!< ${3:Description} */
	} ${2:foo};
##
## Input/Output
# printf
snippet pr
	printf("${1:%s}\n"${2});
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});
snippet prd
	printf("${1:} = %d\n", $1);
snippet prf
	printf("${1:} = %f\n", $1);
snippet prx
	printf("${1:} = %${2}\n", $1);
# getopt
snippet getopt
	int choice;
	while (1)
	{
		static struct option long_options[] =
		{
			/* Use flags like so:
			{"verbose",	no_argument,	&verbose_flag, 'V'}*/
			/* Argument styles: no_argument, required_argument, optional_argument */
			{"version", no_argument,	0,	'v'},
			{"help",	no_argument,	0,	'h'},
			${1}
			{0,0,0,0}
		};

		int option_index = 0;

		/* Argument parameters:
			no_argument: " "
			required_argument: ":"
			optional_argument: "::" */

		choice = getopt_long( argc, argv, "vh",
					long_options, &option_index);

		if (choice == -1)
			break;

		switch( choice )
		{
			case 'v':
				${2}
				break;

			case 'h':
				${3}
				break;

			case '?':
				/* getopt_long will have already printed an error */
				break;

			default:
				/* Not sure how to get here... */
				return EXIT_FAILURE;
		}
	}

	/* Deal with non-option arguments here */
	if ( optind < argc )
	{
		while ( optind < argc )
		{
			${0}
		}
	}
##
# TODO section
snippet todo
	/*! TODO: ${1:Todo description here}
	 *  \todo $1
	 */
## Miscellaneous
# This is kind of convenient
snippet .
	[${1}]
